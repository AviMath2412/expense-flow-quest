// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  country   String
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  role       UserRole
  department String
  country    String
  currency   String
  managerId  String?
  hireDate   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  manager    User?     @relation("UserManager", fields: [managerId], references: [id])
  employees  User[]    @relation("UserManager")
  expenses   Expense[]
  
  // Approval relations
  employeeApprovalRules ApprovalRule[] @relation("EmployeeApprovalRule")
  managerApprovalRules  ApprovalRule[] @relation("ManagerApprovalRule")
  approvalSteps         ApprovalStep[]
  expenseApprovals      ExpenseApproval[]

  @@map("users")
}

model Expense {
  id            String        @id @default(cuid())
  userId        String
  submitDate    DateTime
  totalAmount   Decimal       @db.Decimal(10, 2)
  currency      String
  description   String
  status        ExpenseStatus @default(pending)
  currentStep   Int           @default(1) // Current approval step
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  items         ExpenseItem[]
  receipts      Receipt[]
  approvalActions ApprovalAction[]
  expenseApprovals ExpenseApproval[]

  @@map("expenses")
}

model ExpenseItem {
  id          String  @id @default(cuid())
  expenseId   String
  amount      Decimal @db.Decimal(10, 2)
  date        DateTime
  description String
  category    String
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  expense     Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_items")
}

model Receipt {
  id          String   @id @default(cuid())
  expenseId   String
  filePath    String
  uploadDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model ApprovalAction {
  id          String      @id @default(cuid())
  expenseId   String
  userId      String
  userName    String
  actionType  ActionType
  actionDate  DateTime    @default(now())
  comments    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  expense     Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("approval_actions")
}



model ApprovalRule {
  id                      String   @id @default(cuid())
  employeeId              String
  managerId               String?
  approvers               String   // JSON array of approver IDs
  isSequential            Boolean  @default(false)
  isManagerApprover       Boolean  @default(false)
  minApprovalPercentage   Int      @default(100)
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  employee                User     @relation("EmployeeApprovalRule", fields: [employeeId], references: [id])
  manager                 User?    @relation("ManagerApprovalRule", fields: [managerId], references: [id])
  approvalSteps           ApprovalStep[]

  @@map("approval_rules")
}

model ApprovalStep {
  id              String      @id @default(cuid())
  approvalRuleId  String
  stepOrder       Int
  approverId      String
  approverRole    String      // manager, finance, director, etc.
  isRequired      Boolean     @default(true)
  isAutoApproval  Boolean     @default(false) // If this approver approves, auto-approve
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  approvalRule    ApprovalRule @relation(fields: [approvalRuleId], references: [id], onDelete: Cascade)
  approver        User         @relation(fields: [approverId], references: [id])
  expenseApprovals ExpenseApproval[]

  @@map("approval_steps")
}

model ExpenseApproval {
  id              String      @id @default(cuid())
  expenseId       String
  approvalStepId  String
  approverId      String
  status          ApprovalStatus @default(pending)
  comments        String?
  approvedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  expense         Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approvalStep    ApprovalStep @relation(fields: [approvalStepId], references: [id])
  approver        User        @relation(fields: [approverId], references: [id])

  @@map("expense_approvals")
}

enum UserRole {
  admin
  manager
  employee
}

enum ExpenseStatus {
  pending
  approved
  rejected
}

enum ActionType {
  approved
  rejected
}

enum ApprovalStatus {
  pending
  approved
  rejected
}
